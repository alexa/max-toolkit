/*
* Copyright 2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
*
* You may not use this file except in compliance with the terms and conditions
* set forth in the accompanying LICENSE file.
*/
#ifndef MULTI_AGENT_EXPERIENCE_THREADING_THREADEXECUTOR_HASH_H_
#define MULTI_AGENT_EXPERIENCE_THREADING_THREADEXECUTOR_HASH_H_

#include <cstdlib>
#include <climits>
#include <functional>

namespace multiAgentExperience {
namespace thread {
namespace executor {
namespace threading {

/**
 * NOTE : This implementation has been picked up from : https://tiny.amazon.com/9461wvcr/codeamazpackCtdlblobmastUtil
 *        and might need to be moved to the "MultiAgentExperience-Testable-Device-Agent-API"
 *        package in the future
 *
 * Function to combine hash values in to a single hash value.
 * Combination by XOR. A circular rotate left is applied to the seed value before the XOR so that combining hashes
 * generated by the same hash function for the same value (a common use case) won't degenerate to zero.
 *
 * @param seed Accumulated value from multiple calls.
 * @param value The next value whose hash is to be combined.
 */
template <typename Type>
void hashCombine(size_t& seed, Type const& value) {
    constexpr int bitsMinus1 = (CHAR_BIT * sizeof(size_t)) - 1;
    std::hash<Type> hasher;
    seed = hasher(value) ^ ((seed << 1) | ((seed >> bitsMinus1) & 1));
}

/**
 * Functor to support std::hash implementations for enum classes. Example:
 * @code
 * enum class MyEnum { ONE, TWO, THREE };
 * std::unordered_map<MyEnum, std::string, EnumClassHash> myMap;
 * return myMap[TWO];
 * @endcode
 */
struct EnumClassHash {
    template <typename T>
    std::size_t operator()(T t) const {
        return static_cast<std::size_t>(t);
    }
};

} // threading
} // executor
} // thread
} // multiAgentExperience

#endif // MULTI_AGENT_EXPERIENCE_THREADING_THREADEXECUTOR_HASH_H_